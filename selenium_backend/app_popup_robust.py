from flask import Flask, request, jsonify, send_from_directory
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import os
import time

app = Flask(__name__)
SCREENSHOT_DIR = "screenshots"
os.makedirs(SCREENSHOT_DIR, exist_ok=True)

@app.route('/screenshots/<filename>')
def get_screenshot(filename):
    return send_from_directory(SCREENSHOT_DIR, filename)

@app.route('/send-email', methods=['POST'])
def send_email():
    def close_chrome_profile_popup():
        # Try to close the Chrome profile/sign-in popup if present
        try:
            # The close button is usually a button with aria-label="Close" inside the popup
            close_btns = driver.find_elements(By.XPATH, '//div[@role="dialog"]//button[@aria-label="Close"]')
            for btn in close_btns:
                if btn.is_displayed() and btn.is_enabled():
                    btn.click()
                    time.sleep(1)
                    break
        except Exception:
            pass
    data = request.get_json()
    user_id = data.get('user_id')
    state = data.get('state')
    screenshots = []

    # Use user-provided manager_email
    subject = f"AI Agent Task - [Your Full Name]"
    body = "Generated by your system during the task"

    # Setup Selenium
    service = Service()
    options = webdriver.ChromeOptions()
    options.add_argument("--headless=new")  # or disable for debugging
    driver = webdriver.Chrome(service=service, options=options)

    # Robust popup handling xpaths
    popup_xpaths = [
        '//button[@name="ok"]',  # Notification
        '//button[@aria-label="Close"]',  # Generic close
        '//div[@role="dialog"]//button',  # Dialog close
        '//span[text()="Got it"]',  # "Got it" button
        '//button[@aria-label="Dismiss"]',
        '//span[text()="Dismiss"]',  # Dismiss tip in compose
    ]

    def close_popups():
        for xpath in popup_xpaths:
            try:
                popup_btn = WebDriverWait(driver, 2).until(
                    EC.element_to_be_clickable((By.XPATH, xpath))
                )
                popup_btn.click()
                time.sleep(1)
            except Exception:
                pass

    try:
        driver.get("https://mail.google.com/")
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.ID, "identifierId")))
        driver.find_element(By.ID, "identifierId").send_keys(state['gmail_email'])
        driver.find_element(By.ID, "identifierNext").click()

        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.NAME, "password")))
        driver.find_element(By.NAME, "password").send_keys(state['gmail_password'])
        driver.find_element(By.ID, "passwordNext").click()

        # Wait for inbox or confirm login success
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, '//div[text()="Compose"]')))
        if "signin" in driver.current_url:
            raise Exception("Login failed â€“ check credentials or Google security.")

        # Screenshot after login
        path = os.path.join(SCREENSHOT_DIR, f'{user_id}_step1_login.png')
        driver.save_screenshot(path)
        screenshots.append(f'{user_id}_step1_login.png')

        # Dismiss popups before Compose
        close_popups()
        close_chrome_profile_popup()

        # Click Compose (robust: try all visible Compose buttons)
        from selenium.common.exceptions import ElementNotInteractableException, StaleElementReferenceException
        for _ in range(3):
            try:
                compose_buttons = driver.find_elements(By.XPATH, '//div[text()="Compose"]')
                for btn in compose_buttons:
                    if btn.is_displayed() and btn.is_enabled():
                        driver.execute_script("arguments[0].scrollIntoView(true);", btn)
                        time.sleep(0.5)
                        btn.click()
                        raise StopIteration
                time.sleep(2)
            except (ElementNotInteractableException, StaleElementReferenceException):
                time.sleep(2)
            except StopIteration:
                break
        else:
            raise Exception("Compose button not interactable after several attempts")


        # Wait for Compose popup to be fully ready
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, 'to'))
        )
        time.sleep(1)

        # Screenshot after Compose for debugging
        compose_debug_path = os.path.join(SCREENSHOT_DIR, f'{user_id}_step_compose_opened.png')
        driver.save_screenshot(compose_debug_path)
        screenshots.append(f'{user_id}_step_compose_opened.png')


        # Robustly fill recipient field (focus/click before send_keys, no clear())
        close_popups()
        for _ in range(3):
            to_input = WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.NAME, 'to')))
            if to_input.is_displayed() and to_input.is_enabled():
                try:
                    to_input.click()
                except Exception:
                    pass
                time.sleep(0.5)
                # Only send_keys if not readonly
                if not to_input.get_attribute('readonly'):
                    to_input.send_keys(state['manager_email'])
                    break
            time.sleep(1)
        else:
            raise Exception("Recipient field not interactable after several attempts")

        # Robustly fill subject field (focus/click before send_keys, no clear())
        for _ in range(3):
            subject_input = WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.NAME, 'subjectbox')))
            if subject_input.is_displayed() and subject_input.is_enabled():
                try:
                    subject_input.click()
                except Exception:
                    pass
                time.sleep(0.5)
                if not subject_input.get_attribute('readonly'):
                    subject_input.send_keys(subject)
                    break
            time.sleep(1)
        else:
            raise Exception("Subject field not interactable after several attempts")

        # Robustly fill body field (focus/click before send_keys, no clear())
        for _ in range(3):
            body_input = WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.XPATH, '//div[@aria-label="Message Body"]')))
            if body_input.is_displayed() and body_input.is_enabled():
                try:
                    body_input.click()
                except Exception:
                    pass
                time.sleep(0.5)
                if not body_input.get_attribute('readonly'):
                    body_input.send_keys(body)
                    break
            time.sleep(1)
        else:
            raise Exception("Body field not interactable after several attempts")

        # Screenshot before sending
        pre_send_path = os.path.join(SCREENSHOT_DIR, f'{user_id}_step2_before_send.png')
        driver.save_screenshot(pre_send_path)
        screenshots.append(f'{user_id}_step2_before_send.png')


        # Aggressively dismiss popups/overlays before Send
        for _ in range(3):
            close_popups()
            close_chrome_profile_popup()
            # Try to remove any generic overlays that may block clicks
            try:
                driver.execute_script('''
                    var overlays = Array.from(document.querySelectorAll('[role="dialog"], [aria-label*="Dismiss"], [aria-label*="Close"], [aria-label*="popup"], [aria-label*="Tip"], [aria-label*="Notification"]'));
                    overlays.forEach(function(el) {
                        if (el && el.parentNode) el.parentNode.removeChild(el);
                    });
                ''')
            except Exception:
                pass
            time.sleep(0.5)

        # Send email (with retry)
        for _ in range(3):
            try:
                send_btn = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, '//div[text()="Send"]'))
                )
                driver.execute_script("arguments[0].scrollIntoView(true);", send_btn)
                time.sleep(1)
                send_btn.click()
                break
            except Exception:
                close_popups()
                time.sleep(1)
        else:
            raise Exception("Send button not interactable after aggressive popup removal attempts")

        # Final screenshot
        time.sleep(2)
        done_path = os.path.join(SCREENSHOT_DIR, f'{user_id}_step3_sent_confirmation.png')
        driver.save_screenshot(done_path)
        screenshots.append(f'{user_id}_step3_sent_confirmation.png')

        return jsonify({
            "status": "success",
            "message": "Email sent",
            "screenshots": [f"/screenshots/{f}" for f in screenshots]
        })

    except Exception as e:
        import traceback
        error_path = os.path.join(SCREENSHOT_DIR, f'{user_id}_error.png')
        driver.save_screenshot(error_path)
        # Log error to file for backend debugging
        log_path = os.path.join(SCREENSHOT_DIR, f'{user_id}_error.log')
        with open(log_path, 'w', encoding='utf-8') as f:
            f.write(str(e) + '\n')
            f.write(traceback.format_exc())
        return jsonify({
            "status": "error",
            "message": str(e),
            "trace": traceback.format_exc(),
            "screenshots": [f"/screenshots/{f}" for f in screenshots] + [f"/screenshots/{user_id}_error.png"],
            "log": f"/screenshots/{user_id}_error.log"
        })

    finally:
        driver.quit()

if __name__ == '__main__':
    app.run(debug=True)
